#import rayui;
#import time;

Scene :: enum {
  BETTING_MENU,
  RACE_SCENE,
  ROUND_OVER_MENU,
}

selected_horse: u8;

scene: Scene = Scene::BETTING_MENU;

Stint :: struct {
  begin:    float;
  duration: float;
}

Horse :: struct {
  progress:        float;
  current_speed:   float;
  target_speed:    float;
  stint:           Stint;
  odds:            float;
  odds_against:     s64;
}

winning_horse_index: s32;
bet: s32;
user_balance: s32 = 1000;
debt : s32 = 0;
total_odds : float = 0;

HORSE_SIZE :: 40;
NUM_LANES  :: 4;

horses: Horse[NUM_LANES];

colors: Color[NUM_LANES] = {
  RED,
  GREEN,
  YELLOW,
  BLUE
};

last_winnings: s32;

refresh_odds :: fn() {
  total_odds = 0;
  high_roller_idx := GetRandomValue(0, NUM_LANES - 1);
  high_roller_odds_against := GetRandomValue(15, 30);
  odds := 1 as float / high_roller_odds_against as float;
  total_odds += odds;
  horses[high_roller_idx].odds = odds;
  horses[high_roller_idx].odds_against = high_roller_odds_against;

  for i in 0..NUM_LANES {
    if i != high_roller_idx {
      odds_against := GetRandomValue(2, 20);
      odds = 1 as float / odds_against as float;
      total_odds += odds;
      horses[i].odds = odds;
      horses[i].odds_against = odds_against;
    }
  }
}

draw :: fn() {
  finish_line_x := ((GetScreenWidth() as float) * 0.9) as s32;
  DrawRectangle(finish_line_x, 0, 45, GetScreenHeight(), PURPLE);
  LANE_HEIGHT := GetScreenHeight() / NUM_LANES;
  PADDING := LANE_HEIGHT / 10;
  for i in 0..NUM_LANES {
    horse := horses[i];
    x : s32 = GetScreenWidth() * horse.progress;
    y : s32 = ((i % NUM_LANES) * LANE_HEIGHT + PADDING + HORSE_SIZE) as s32;
    DrawRectangle(x, y, HORSE_SIZE, HORSE_SIZE, colors[i]);
  }
}

update_stint :: fn(horse: Horse*) {
  // if the stint is over, or it never began, restart it.
  time := GetTime();   
  if horse.stint.duration == 0 || time - horse.stint.begin >= horse.stint.duration {
    horse.stint.begin = time;
    horse.stint.duration = GetRandomValue(1, 10) as float / 10.0;
    speed := GetRandomValue(5, 10) as float / 5.0;
    rand := GetRandomValue(0, (total_odds * 100) as s32);
    if rand < horse.odds * 100 {
      speed += 0.1;
    }
    horse.target_speed = speed as float / 1000.0;
  }
}

update :: fn() {
  for i in 0..NUM_LANES {
    horse := &horses[i];
    update_stint(horse);    
    horse.progress = fmod(horse.progress + horse.current_speed, 1.0);
    horse.current_speed = lerp(horse.current_speed, horse.target_speed, 0.01);
    if (horse.progress > 0.9) {
      winning_horse_index = i as u8;
      if selected_horse == i {
        winnings := bet * horse.odds_against;
        if debt < 0 {
          amount_to_pay := min![s32](winnings, -debt);
          debt += amount_to_pay;
          winnings -= amount_to_pay;
        }
        user_balance += winnings;
        last_winnings = winnings;
      }
      memset(horses, 0, sizeof(Horse) * NUM_LANES);
      refresh_odds();
      scene = Scene::ROUND_OVER_MENU;
      break;
    }
  }
}

draw_betting_menu :: fn() {
  BUTTON_WIDTH  := GetScreenWidth() / 15;
  BUTTON_HEIGHT := 60;

  style := Style {
    foreground: WHITE,
    background: GRAY,
    font_size:  16,
    use_jiggly_text: false,
  };

  // Define rectangles for different sections
  betting_section := Rectangle {
    x: GetScreenWidth() - (BUTTON_WIDTH * 3),
    y: GetScreenHeight() / 2 - BUTTON_HEIGHT * 2,
    width: BUTTON_WIDTH * 3,
    height: BUTTON_HEIGHT * 2.5
  };

  balance_section := Rectangle {
    x: GetScreenWidth() - (BUTTON_WIDTH * 3),
    y: betting_section.y - BUTTON_HEIGHT * 2,
    width: BUTTON_WIDTH * 3,
    height: BUTTON_HEIGHT * 2
  };

  loan_section := Rectangle {
    x: GetScreenWidth() - (1.5 * BUTTON_WIDTH),
    y: GetScreenHeight() - (3.25 * BUTTON_HEIGHT),
    width: BUTTON_WIDTH * 1.5,
    height: BUTTON_HEIGHT * 3
  };

  horse_section := Rectangle {
    x: (GetScreenWidth() / 2) - (BUTTON_HEIGHT * 4),
    y: BUTTON_HEIGHT * 1.15,
    width: BUTTON_WIDTH * NUM_LANES,
    height: BUTTON_HEIGHT
  };

  // Draw background rectangles for sections
  DrawRectangleRec(betting_section, DARKGRAY.with_alpha(50));
  DrawRectangleRec(balance_section, DARKGRAY.with_alpha(50));
  DrawRectangleRec(loan_section, DARKGRAY.with_alpha(50));
  DrawRectangleRec(horse_section, DARKGRAY.with_alpha(50));

  // Draw betting buttons
  betting_rect := Rectangle {
    x: betting_section.x + BUTTON_WIDTH / 4,
    y: betting_section.y + BUTTON_HEIGHT / 4,
    width: BUTTON_WIDTH,
    height: BUTTON_HEIGHT / 2
  };

  if button("Increase Bet", betting_rect, style) {
    if bet == 0 then bet = 10;
    bet *= 1.2;
    if bet > user_balance then bet = user_balance;
  }

  betting_rect.x += (BUTTON_WIDTH as float) * 1.5;
  if button("Decrease Bet", betting_rect, style) {
    bet /= 1.2;
    if bet <= 0 then bet = 0;
  }

  betting_rect.y += (BUTTON_HEIGHT as float) * 1.5;
  if button("Max Bet", betting_rect, style) {
    bet = user_balance;
  }

  // Draw balance and debt text
  text := $"Current Bet: {bet}";
  DrawText(text, balance_section.x as s32 + 10, balance_section.y as s32 + 10, 18, WHITE);
  free(text);

  text = $"Current Balance: ${user_balance}";
  DrawText(text, balance_section.x as s32 + 10, balance_section.y as s32 + 50, 18, GREEN);
  free(text);

  text = $"Debt: {debt}";
  DrawText(text, balance_section.x as s32 + 10, balance_section.y as s32 + 90, 18, RED);
  free(text);

  // Draw start race button
  start_rect := Rectangle {
    x: betting_section.x + BUTTON_WIDTH / 4,
    y: betting_section.y + BUTTON_HEIGHT,
    width: BUTTON_WIDTH * 2.5,
    height: BUTTON_HEIGHT / 2
  };

  if button("Start Race", start_rect, style) {
    if user_balance > 0 && bet > 0 {
      scene = Scene::RACE_SCENE;
      user_balance -= bet;
    } else {
      style.foreground = RED;
    }
  }

  // Draw loan buttons
  style.foreground = ORANGE;

  DrawText("Take loan, 15% interest.", loan_section.x as s32, (loan_section.y as s32) - 24, 16, ORANGE);

  loan_rect := Rectangle {
    x: loan_section.x + BUTTON_WIDTH / 4,
    y: loan_section.y + BUTTON_HEIGHT / 4,
    width: BUTTON_WIDTH,
    height: BUTTON_HEIGHT / 2
  };

  if button("$1,000", loan_rect, style) {
    user_balance += 1000;
    debt -= 1000 * 1.15;
  }

  loan_rect.y += BUTTON_HEIGHT;
  if button("$5,000", loan_rect, style) {
    user_balance += 5000;
    debt -= 5000 * 1.15;
  }

  loan_rect.y += BUTTON_HEIGHT;
  if button("$10,000", loan_rect, style) {
    user_balance += 10000;
    debt -= 10000 * 1.15;
  }

  // Draw horse betting buttons
  for i in 0..NUM_LANES {
    rect := Rectangle {
      x: horse_section.x + (i * BUTTON_WIDTH) as float,
      y: horse_section.y + BUTTON_HEIGHT / 4,
      width:  BUTTON_WIDTH,
      height: BUTTON_HEIGHT / 2,
    };

    style.foreground = colors[i];
    style.background = GRAY.with_alpha(25);
    text := $"{1}/{horses[i].odds_against}";
    defer free(text);
    if button(text, rect, style) then selected_horse = i;
  }
}

draw_your_horse_indicator :: fn() {
  text := $"{selected_horse}, bet: ${bet}\nprojected win: ${bet * horses[selected_horse].odds_against}";
  width := MeasureText(text, 18);
  DrawRectangle(0, 0, width * 1.2, HORSE_SIZE, colors[selected_horse]);
  defer free(text);
  DrawText(text, 4, 0, 18, BLACK);
}

draw_round_over_menu :: fn() {
  
  #static style := Style {
    foreground: WHITE,
    background: CLEAR,
    font_size: 32
  };

  color_name := switch winning_horse_index {
    0 => "red",
    1 => "green",
    2 => "yellow",
    3 => "blue",
  };
  
  text := $"Horse #{winning_horse_index+1} ({color_name})  wins!!\n";
  width := measure_jiggly_text(text, style) / 2;


  text_rect := Rectangle {
    x: (GetScreenWidth() / 2 - width),
    y: (GetScreenHeight() / 2),
    width: 0,
    height: 0
  };
  
  jiggly_text(text, text_rect, style);
  free(text);


  if selected_horse == winning_horse_index {
    text = $"You win ${last_winnings}";
    DrawText(text, (text_rect.x as s32), (text_rect.y as s32) - style.font_size * 2, 32, GREEN);
    free(text);
  } else {
    text = $"You lost ${bet}";
    DrawText(text, (text_rect.x as s32), (text_rect.y as s32) - style.font_size * 2, 32, RED);
    free(text);
  }
  
  

  BUTTON_WIDTH  := GetScreenWidth() / 10;
  BUTTON_HEIGHT := 80;

  #static button_style := Style {
    foreground: WHITE,
    background: GRAY,
    font_size:  24,
    use_jiggly_text: false,
  };

  width = MeasureText("Back to betting menu", 24);

  button_rect := Rectangle {
    x: (GetScreenWidth() / 2) - (width / 2),
    y: (GetScreenHeight() / 4),
    width: BUTTON_WIDTH,
    height: BUTTON_HEIGHT
  };

  if button("Back to betting menu", button_rect, button_style) {
    bet = 0;
    scene = Scene::BETTING_MENU;
  }    
}

main :: fn() {
  
  SetTraceLogLevel(TraceLogLevel::LOG_NONE);
  SetConfigFlags(ConfigFlags::FLAG_WINDOW_RESIZABLE);
  InitWindow(800, 600, "Debt Simulator");
  MaximizeWindow();
  SetTargetFPS(60);

  refresh_odds();
  
  while !WindowShouldClose() {
    BeginDrawing();
      ClearBackground(BLACK);
      switch scene {
        Scene::BETTING_MENU: {
          draw_betting_menu();
        }
        Scene::RACE_SCENE: {
          draw();
          update();
        }
        Scene::ROUND_OVER_MENU: {
          draw_round_over_menu();
        }
      }
    draw_your_horse_indicator();
    EndDrawing();
  }
}
